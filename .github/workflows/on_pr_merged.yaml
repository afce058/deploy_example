name: On PR merged
permissions:
  actions: write
  packages: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      services:
        description: "services list (no spaces) eg:service1,service2"
        required: true
        default: "service1,service2"
      deployFront:
        description: "Should deploy front yes/no"
        required: true
        default: "no"

env:
  cluster_services: "['service1', 'service2', 'frontend']"
  namespace: micros
  parallel: 2

jobs:
  parameters:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.capture.outputs.services }}
      namespace: ${{ steps.capture.outputs.namespace }}
      parallel: ${{ steps.capture.outputs.parallel }}
      deployFront: ${{ steps.capture.outputs.deployFront }}
      front_path: ${{ steps.capture.outputs.front_path }}
    steps:
      - name: save workflow parameters
        id: capture
        run: |
          services_json=$(echo '${{ github.event.inputs.services }}' | jq -R -c 'split(",")')
          echo "services=$services_json" >> $GITHUB_OUTPUT
          echo "namespace=${{ env.namespace }}" >> $GITHUB_OUTPUT
          echo "parallel=${{ env.parallel }}" >> $GITHUB_OUTPUT
          echo "front_path=${{ fromJson(env.cluster_services)[2] }}" >> $GITHUB_OUTPUT
          echo "deployFront=${{ github.event.inputs.deployFront }}" >> $GITHUB_OUTPUT

  run_tests:
    uses: ./.github/workflows/run_tests.yaml
    needs: parameters
    strategy:
      matrix:
        micro: ${{ fromJson(needs.parameters.outputs.services) }}
      max-parallel: ${{ fromJson(needs.parameters.outputs.parallel) }}
    with:
      microservicePath: ${{ matrix.micro }}

  compute_tag_version:
    runs-on: ubuntu-latest
    needs: 
      - run_tests
    outputs:
      tag_version: ${{ env.GitVersion_SemVer }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'
      - name: Determine Version
        id: gitversion 
        uses: gittools/actions/gitversion/execute@v3.1.11

  create_ingress_controller:
    uses: ./.github/workflows/create_ingress_controller.yaml
    needs:
      - compute_tag_version
      - parameters
    with:
      namespace: ${{ needs.parameters.outputs.namespace }}
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}

  create_sbom:
    uses: ./.github/workflows/create_sbom.yaml
    needs: 
      - compute_tag_version
      - parameters
    strategy:
      matrix:
        micro: ${{ fromJson(needs.parameters.outputs.services) }}
      max-parallel: ${{ fromJson(needs.parameters.outputs.parallel) }}
    with:
      tag: ${{ needs.compute_tag_version.outputs.tag_version }}
      microservicePath: ${{ matrix.micro }}

  create_containers:
    uses: ./.github/workflows/create_container.yaml
    needs:
      - create_sbom
      - compute_tag_version
      - parameters
    strategy:
      matrix:
        micro: ${{ fromJson(needs.parameters.outputs.services) }}
      max-parallel: ${{ fromJson(needs.parameters.outputs.parallel) }}
    with:
      environment: prod
      tag: ${{ needs.compute_tag_version.outputs.tag_version }}
      microservicePath: ${{ matrix.micro }}
      dockerfileName: Dockerfile
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

  create_front_container:
    uses: ./.github/workflows/create_front_container.yaml
    if: inputs.deployFront == 'yes'
    needs:
      - compute_tag_version
      - create_containers
      - create_ingress_controller
      - parameters
    with:
      environment: prod
      tag: ${{ needs.compute_tag_version.outputs.tag_version }}
      frontPath: ${{ needs.parameters.outputs.front_path }}
      dockerfileName: Dockerfile
      basePath: ${{ needs.create_ingress_controller.outputs.balancer_address }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

  create_release:
    runs-on: ubuntu-latest
    if: always()
    needs: 
      - parameters
      - compute_tag_version
      - create_containers
      - create_front_container
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: 'main'
      - name: obtain username
        run: |
          echo "username=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.3
        with:
          files: '["${{ github.workspace }}/deployment-automation/*.yaml"]'
        env: 
          docker.repo1: ${{ fromJson(env.cluster_services)[0] }}
          docker.repo2: ${{ fromJson(env.cluster_services)[1] }}
          docker.repo_front: ${{ fromJson(env.cluster_services)[2] }}
          deploy.service1: "${{ contains(fromJson(needs.parameters.outputs.services), fromJson(env.cluster_services)[0]) && 'yes' || 'no' }}"
          deploy.service2: "${{ contains(fromJson(needs.parameters.outputs.services), fromJson(env.cluster_services)[1]) && 'yes' || 'no' }}"
          deploy.front: "${{ needs.parameters.outputs.deployFront }}"
          docker.username: ${{ env.username }}
          namespace: ${{ env.namespace }}
          environment: ${{ env.namespace }}
          tag: ${{ needs.compute_tag_version.outputs.tag_version }}
      - name: Create a relase
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.EXTENDED_ACCESSTOKEN }}"
          tag_name: ${{ needs.compute_tag_version.outputs.tag_version }}
          generate_release_notes: true
          files: |
            ${{ github.workspace }}/deployment-automation/service_frontend.yaml
            ${{ github.workspace }}/deployment-automation/service1.yaml
            ${{ github.workspace }}/deployment-automation/service2.yaml
            ${{ github.workspace }}/deployment-automation/ingress.yaml
            ${{ github.workspace }}/deployment-automation/ingress_frontend.yaml